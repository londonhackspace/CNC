#!/bin/bash

set -euo pipefail

fqhostname="$1"

hostname=`echo "$fqhostname" | sed 's/\..*//'`


# make sure no questions will be asked
export DEBIAN_FRONTEND=noninteractive

# use a directory /chroot/cnc/etc/CNC-machine-setup/ to hold empty
# files of the parts that have already been done.
# -- (ok only the dir and then 1 file at the very end for now)

# Log to a file in /tmp to be able to see what's going on.
# Since Ansible only shows the output once it has finished.

# XX mis-use filesystem on network image to keep the logs. OK?
mkdir -p /root/stage1-logs

{
set -eu
set -x

01_partition_disk () {
    set -eu
    cat <<END | fdisk /dev/sda
o
n
p


+80M
n
p


+1G
n
p



w
END
}

02_create_filesystems () {
    set -eu
    mkfs.ext4 -F /dev/sda1
    mkswap /dev/sda2
    mkfs.ext4 -F /dev/sda3
}


filesystems_mounted () {
    df /chroot/cnc|grep -q ^/dev/sda3
}

mount_filesystems () {
    set -eu
    if ! filesystems_mounted; then
	mkdir -p /chroot/cnc
	mount /dev/sda3 /chroot/cnc
	mkdir -p /chroot/cnc/boot
	mount /dev/sda1 /chroot/cnc/boot
    fi
}

mark_filesystem () {
    # mark it as ours
    mkdir -p /chroot/cnc/etc/CNC-machine-setup/
}

umount_filesystems () {
    umount /chroot/cnc/boot || true
    umount /chroot/cnc || true
}


04_swapon () {
    swapon /dev/sda2
}

debootstrap_done () {
    test -e /chroot/cnc/etc/CNC-machine-setup/debootstrap_done
}

05_debootstrap () {
    set -eu
    # XX should we apt-get update first?
    debootstrap wheezy /chroot/cnc/
    touch /chroot/cnc/etc/CNC-machine-setup/debootstrap_done
}

# XX parametrize /dev/sda
06_write_fstab () {
    cat <<END > /chroot/cnc/etc/fstab
proc            /proc           proc    defaults        0       0
/dev/sda1       /boot           ext4    defaults        0       1
END
    chroot /chroot/cnc ln -s /proc/mounts /etc/mtab || true
}

07_bind_mount () {
    set -eu
    mount --bind /dev /chroot/cnc/dev || true
    mount --bind /dev/pts /chroot/cnc/dev/pts || true
    mount -t proc proc /chroot/cnc/proc || true
    # is mounting /sys needed or is this done by a package automatically?
    mount -t sysfs sysfs /chroot/cnc/sys || true
}

08_installs () {
    set -eu
    echo "install standard utils and services"
    # NOTE: now also in 
    chroot /chroot/cnc/ apt-get install -y locales screen rlwrap tcpdump strace git openssh-client openssh-server openntpd vim emacs aptitude lsof
    # make sure we've still got ssh on the host? (Probably unnecessary
    # but perhaps installation in the chroot would kill by process
    # name?)
    chroot /chroot/cnc/ /etc/init.d/ssh stop
    /etc/init.d/ssh restart

    echo "configure locales"
    echo "en_GB.UTF-8 UTF-8" > /chroot/cnc/etc/locale.gen 
    chroot /chroot/cnc/ locale-gen

    echo "set hostname"
    echo "$hostname" > /chroot/cnc/etc/hostname

    echo "add LinuxCNC package repository, update package lists"
    chroot /chroot/cnc/ bash -c "
      apt-key adv --keyserver hkp://keys.gnupg.net --recv-key 3cb9fd148f374fef
      apt-get install -y python-software-properties
      add-apt-repository 'deb http://linuxcnc.org/ wheezy base 2.7-uspace'
      apt-get update"

    echo "install Linux CNC kernel and userspace"
    chroot /chroot/cnc/ bash -c "
      apt-get dist-upgrade -y
      apt-get install -y linux-image-rt-686-pae
      apt-get install -y linuxcnc-uspace"

    echo "install grub"
    mkdir -p /chroot/cnc/boot/grub
    chroot /chroot/cnc/ apt-get install -y grub-pc

    echo "explicitely run grub-install" # in case grub-pc was installed earlier and ran it already
    chroot /chroot/cnc/ grub-install /dev/sda

    echo "install grub-setup" # don't forget! uh
    chroot /chroot/cnc/ grub-setup /dev/sda
  
# Install graphical desktop. It's unclear from the LinuxCNC website
# which desktop they are using; Debian Wheezy uses Gnome by default
# (*"if you donâ€™t want Gnome desktop select 'Advanced Options >
# Alternative desktop environments'"* on [Getting
# LinuxCNC](http://linuxcnc.org/docs/2.7/html/getting-started/getting-linuxcnc.html)).
# Leave away task-xfce-desktop if you want Gnome.
#
# Using aptitude here over apt-get since (IIRC, Christian) aptitude
# installs more recommended packages by default, which will be
# preferable.
#
# In case this fails (because System-D isn't running in the chroot or
# some such), move it to stage2.
    echo "install desktop software"
    chroot /chroot/cnc/ aptitude install -y task-desktop task-xfce-desktop lightdm

    echo "make directory for authorized_keys"
    mkdir /chroot/cnc/root/.ssh || true
    chmod go-rwx /chroot/cnc/root/.ssh || true

    echo "add marker for stage 2 detection"
    echo "# Generated by stage 1 from https://github.com/londonhackspace/CNC" > /chroot/cnc/etc/CNC-machine-setup/stage1-done
}

09_authorized_keys () {
    ( umask 077 ; mkdir /chroot/cnc/root/.ssh )
    cp "$(basename "$0")"/authorized_keys /chroot/cnc/root/.ssh/
}

10_reboot () {
    reboot
    # keep ssh connection open until machine actually goes away
    while true; do
	echo "waiting for ssh connection to be killed..."
	sleep 2
    done
}


# -------------------------------------------------------------------

continue_with_install () {
    set -eu
    06_write_fstab
    07_bind_mount || true
    08_installs
    09_authorized_keys
    10_reboot # noreturn
}

continue_with_debootstrap () {
    set -eu
    05_debootstrap
    continue_with_install
}

continue_with_partitioning () {
    set -eu
    01_partition_disk
    02_create_filesystems
    mount_filesystems
    mark_filesystem
    04_swapon
    continue_with_debootstrap
}

if [ -d /etc/CNC-machine-setup ]; then
    echo "Machine is running in stage 2, aborting $0"
    exit 0
fi

echo "Try to mount filesystems"
mount_filesystems || true


if filesystems_mounted; then
    if [ -e /chroot/cnc/etc/CNC-machine-setup/stage1-done ]; then
	echo "stage 1 already done, exit"
	exit 0
    elif [ -e /chroot/cnc/etc/CNC-machine-setup/ ]; then
	04_swapon || true
	if debootstrap_done; then
	    continue_with_install
	else
	    continue_with_debootstrap
	fi
    else
	echo "The mounted filesystem is not a CNC-machine setup, hence start with partitioning anyway."
	umount_filesystems
	continue_with_partitioning
    fi
else
    continue_with_partitioning
fi

} 2>&1 | tee `mktemp -p /root/stage1-logs`

